from sqlalchemy import create_engine
from sqlalchemy.orm import sessionmaker, scoped_session
from models.base import Base
from models.expense import Expense
from models.user import User

# Dictionary to store model references
classes = {'User': User, 'Expense': Expense}

class DBstorage:
    """Database storage class to handle interactions with MySQL using SQLAlchemy"""
    
    __engine = None
    __session = None

    def __init__(self):
        """Instantiate the database storage class and connect to MySQL"""
        self.__engine = create_engine(f'mysql+pymysql://root:aloh@localhost/trackxpense', echo=True)
        self.reload()

    def reload(self):
        """Reloads objects from DB and starts session"""
        Base.metadata.create_all(self.__engine)  # Create tables if they don't exist
        session_factory = sessionmaker(bind=self.__engine, expire_on_commit=False)
        self.__session = scoped_session(session_factory)  # Use scoped_session for thread safety

    def add(self, obj):
        """Adds a new object to the database session"""
        if obj:
            self.__session.add(obj)

    def save(self):
        """Commits all changes to the database"""
        self.__session.commit()

    def delete(self, obj):
        """Deletes an object from the database"""
        if obj:
            self.__session.delete(obj)
            self.save()

    def all(self, cls=None):
        """Returns all instances of a class or all instances in the database"""
        all_objects = {}
        if cls:
            if cls in classes.values():
                objs = self.__session.query(cls).all()
                all_objects = {obj.id: obj for obj in objs}
        else:
            for cls in classes.values():
                objs = self.__session.query(cls).all()
                for obj in objs:
                    all_objects[obj.id] = obj
        return all_objects

    def get_user(self, method, user_info):
        """Fetches a user based on a specified attribute"""
        if hasattr(User, method):
            return self.__session.query(User).filter(getattr(User, method) == user_info).first()
        return None

    def get_user_expenses(self, uid):
        """Fetches all expenses associated with a user ID"""
        return self.__session.query(Expense).filter_by(user_id=uid).all()

    def get_expense(self, expense_id):
        """Fetches a single expense by its ID"""
        return self.__session.query(Expense).filter_by(id=expense_id).first()

    def remove_session(self):
        """Closes the session to free up resources"""
        self.__session.remove()
